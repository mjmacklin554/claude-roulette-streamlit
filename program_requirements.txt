# Roulette Betting System - Streamlit Web Application Requirements
Date: 2025-10-20

## System Overview
A Streamlit web application implementing a complete 2-stage roulette betting and recovery strategy with sequence codes, A1 wait rules, four corner loss rules, and mixed numbers for loss/recovery tracking. The application provides a user-friendly interface with file input capabilities, configurable parameters, and comprehensive visualization of results.

## Streamlit User Interface

### 1. Configuration Panel
- **Application Title**: "Michael's Roulette System Configuration"
- **File Input Section**:
  - Checkbox: "Load outcomes from file" (default: False)
  - File selector: Excel (.xls/.xlsx) or CSV files from 'numbers' folder
  - File validation: Shows warning if no files found
  - Dynamic loading: Reads first column from selected file
- **Sequence Code Selection**:
  - Dropdown with options:
    - "Standard (3, 4, 2)" → {a: 3, b: 4, c: 2}
    - "Alternative (8, 44, 10)" → {a: 8, b: 44, c: 10}
- **Stage 2 Configuration**:
  - Number input: "Stage 2 Starting Divisor"
  - Range: 1-32, Default: 8, Step: 1
- **Run Button**: "Run Simulation" (triggers main processing)

### 2. Results Display
- **Results Table**: Interactive DataFrame display via st.dataframe()
- **Balance Graph**:
  - Matplotlib line chart showing balance progression
  - X-axis: Spin Number, Y-axis: Balance
  - Break-even line at y=0, Grid enabled
- **System Messages**: Debug output and system events
- **Final Summary**:
  - Starting sequence codes used
  - Total sequences completed
  - Final balance (chips) and bank (units)
  - Session status (ACTIVE/ENDED)
  - Outcomes processed count

## Core Game Components

### 3. Lists and Numbers
- **A1**: [2,3,5,6,17,18,20,21,25,26,28,29,31,32,34,35] (16 corner bet numbers)
- **A2**: [1-6,13-18,19-24,25-30,31-36] (30 six-line bet numbers)
- **Default Outcomes**: [0,15,27,33,26,14,36,2,16,22,7,17,30,22,28,9,10,11,6,1,33,10,15,18,11,9,1,7,30,30,36,36,4,4,32,28,6,10,22,24,33,36,15,34,9,0,0,1,18,19,20,8,17,11,27,16,26,4,29,2,2]
- **File Outcomes**: Loaded dynamically from user-selected Excel/CSV files

### 4. Win/Loss Determination
- **Win ('W')**: If outcome is in A1 list
- **Loss ('L')**: If outcome is NOT in A1 list

### 5. Bet Progression System
- **Bet1**: 5 chips on A2 numbers (+1 profit if win, -5 if lose)
- **Bet2**: 4 chips on A1 numbers (+5 profit if win, -4 if lose)
- **Bet3**: 8 chips on A1 numbers (+10 profit if win, -8 if lose)
- **Progression**: After win → Reset to Bet1, After loss → Next bet type
- **Stage End**: If Bet3 loses → Stage 1 ends
- **Display**: Actual bet column shows "Bet 1", "Bet 2", "Bet 3"

### 6. Sequence Codes
- **Initial**: User-configurable (Standard: a=3, b=4, c=2 OR Alternative: a=8, b=44, c=10)
- **Trigger**: Start recording after first A1 win
- **Win Formula**:
  - if a > 13 then a = 10
  - if 10 < a < 14 then a = a-4
  - if 7 < a < 11 then a = a-3
  - if a < 8 then a = a-2
  - b = b - c
  - c = (int(b/a)) * 2
- **Loss Formula**:
  - a = a + 1
  - b = b + c
  - c = (int(b/a)) * 2
- **Special Rule**: If b > 89 then b = int((b+1)/2)

### 7. A1 Wait Rule
- **Trigger**: After any A1 win (outcome in A1 AND bet wins)
- **Effect**:
  - Betting STOPS (no actual bets placed)
  - Sequence codes CONTINUE to be calculated and recorded
- **Wait Condition**: 3 consecutive non-A1 outcomes
- **Reset**: Any A1 outcome during wait resets counter to 0
- **Resume**: Betting resumes on line AFTER 3rd consecutive non-A1 outcome

### 8. Four Corner Loss Rule
- **Trigger**: After 4 consecutive non-A1 outcomes
- **Effect**: Calculate new sequence codes but don't record them on next line
- **Wait**: System waits for A1 outcome to end the rule
- **Resume**: Pending codes are recorded on line AFTER A1 outcome

### 9. Mixed Numbers System
- **Purpose**: Track losses and recoveries using base-4 chip system
- **Format**: integer.decimal where integer = units of 4 chips, decimal = individual chips
- **Loss Recording**:
  - 5 chips loss = -2.3 mixed number (-2×4 + 3 = -8+3 = -5)
  - 4 chips loss = -1.0 mixed number (-1×4 = -4)
  - 8 chips loss = -2.0 mixed number (-2×4 = -8)
- **Win Recovery** (Bet2/Bet3 Stage 1, All Stage 2 wins):
  - Reduce negative by bet units: Bet2 (+1), Bet3 (+2), Stage 2 (+bet units)
  - Add Built-in Profit (BIP): 1 unit = 1 chip BIP
  - Display: negative column shows integer part, positive shows mixed number
  - Recovery: When negative + positive ≥ 0, add net profit to balance
- **Display Rules**:
  - Losses: Show cumulative negative integer, decimal in positive (first loss only)
  - Wins: Show final negative/positive mixed numbers
  - Stage 2 complete: Show final mixed numbers, then reset after display

### 10. Stage 2 Recovery System
- **Trigger**: After Bet3 loss in Stage 1 (when -5.3 mixed number deficit exists)
- **Entry Condition**: Wait for a ≤ 10 AND sequence codes being displayed
- **Special Rule**: When negative > 20 units, bypass a ≤ 10 rule and continue betting
- **Betting Logic**:
  - Always bet on A1 numbers only
  - Units = c ÷ divisor (minimum 1 unit)
  - Initial divisor = User configurable (default: 8, range: 1-32)
  - Divisor halves when b > 89 rule applies during active betting: 8→4→2→1
- **Betting Restrictions**:
  - No betting when sequence codes are suppressed (Four Corner Loss Rule)
  - No betting when a > 10 (unless negative > 20 units)
- **Recovery Completion**:
  - Calculate: negative chips + positive chips
  - When total ≥ 0: full recovery achieved
  - Display final mixed numbers on recovery line
  - Add any excess profit to balance
  - Next line shows "STOP" with success message
- **Failure Condition**: Bank lost (1000 chips = 250 units)

## Program Flow

### Phase 1: Initialization
1. Load outcomes list
2. Set initial sequence codes (3,4,2)
3. Initialize all counters and flags

### Phase 2: Wait for First A1 Win
- Process outcomes until first A1 win occurs
- Record outcomes with no bets, no sequence codes

### Phase 3: Active Betting Phase
For each outcome:
1. **Check A1 Wait Rule**
   - If active: no betting, but continue sequence codes
   - Track consecutive non-A1 outcomes to end wait

2. **Display Sequence Codes**
   - Apply pending codes from four corner rule if available
   - Show current codes (unless four corner rule suppresses)

3. **Place Bet** (if not in A1 wait)
   - Use current bet progression (Bet1/Bet2/Bet3)
   - Update balance and bet progression
   - Handle mixed numbers for losses and wins

4. **Track Four Corner Rule**
   - Count consecutive non-A1 outcomes
   - Trigger rule after 4 consecutive non-A1
   - End rule when A1 outcome appears

5. **Update Sequence Codes**
   - Always update (even during A1 wait)
   - Based on A1 win/loss, not bet win/loss
   - Apply special b > 89 rule if needed

6. **Handle Mixed Numbers**
   - Record losses in negative/positive columns
   - Process recovery for Bet2/Bet3 wins
   - Reset mixed numbers after recovery

7. **Check A1 Wait Trigger**
   - If A1 win occurred, start A1 wait rule

### Phase 4: Stage 2 Recovery Phase (if Bet3 loses)
For each outcome:
1. **Check Entry Conditions**
   - Wait for a ≤ 10 AND sequence codes displayed
   - Override a ≤ 10 rule if negative > 20 units

2. **Place Stage 2 Bet** (if conditions met)
   - Calculate units: c ÷ divisor
   - Bet on A1 numbers only
   - Update mixed numbers for wins/losses

3. **Check Recovery Status**
   - Calculate total recovery: negative chips + positive chips
   - If ≥ 0: complete recovery, update balance, show "STOP"
   - If < 0: continue Stage 2 betting

4. **Update Divisor**
   - Halve divisor when b > 89 rule applies during active betting

### Phase 5: End Conditions
- Stage 1: Bet3 loss → Stage 2 begins
- Stage 2: Full recovery → Sequence ends successfully
- Stage 2: Bank lost (1000 chips) → Sequence ends in failure
- All outcomes processed → Display results

## Key Implementation Notes

### Critical Logic Separations
1. **Stage 1 Betting Logic**: Independent of sequence codes, uses Bet1/2/3 progression
2. **Stage 2 Betting Logic**: Dependent on sequence codes display, uses unit-based betting
3. **Sequence Codes**: Always update regardless of stage or betting status
4. **A1 Wait Rule**: Stage 1 only - affects betting but not sequence codes
5. **Four Corner Rule**: Both stages - affects sequence code display timing
6. **Mixed Numbers**: Track losses/recovery across both stages separately from balance
7. **Divisor Logic**: Stage 2 only - changes during active betting when b > 89

### Timing Rules
- Sequence codes calculated AFTER outcome, applied to NEXT line
- Stage 1: A1 wait rule stops betting but continues sequence codes
- Stage 1: Four corner rule delays sequence code recording but allows betting
- Stage 2: Four corner rule delays sequence codes AND stops betting
- Stage 2: Betting only when sequence codes are displayed
- Stage 2: Divisor changes only during active betting periods
- Betting resumes line AFTER wait periods end

### DataFrame Output
- Empty values shown as empty strings (not NaN)
- Balance shown for: Stage 1 wins, Stage 2 recovery completion
- Sequence codes continue during Stage 1 A1 wait periods
- Four corner rule creates gaps in sequence code display (both stages)
- Mixed numbers display in negative/positive columns during loss sequences
- Actual bet column formats:
  - Stage 1: "Bet 1", "Bet 2", "Bet 3"
  - Stage 2: "X units" (where X = c ÷ divisor)
  - Post-recovery: "STOP"
- Recovery line shows final mixed numbers before reset
- Success message displayed when Stage 2 completes

## Technical Specifications
- **Framework**: Streamlit web application
- **Language**: Python with pandas, streamlit, matplotlib
- **File Support**: Excel (.xls/.xlsx) and CSV file reading
- **Starting Bank**: 250 units (1000 chips = 250 units, 1 chip = $1)
- **DataFrame Columns**: ['line', 'outcome', 'win', 'a', 'b', 'c', 'actual bet', 'negative', 'positive', 'balance']
- **Data Storage**: Results stored in pandas DataFrame, displayed via st.dataframe()
- **Visualization**: Matplotlib integration for balance progression charts
- **File Management**: 'numbers' folder for input files, automatic file discovery
- **Error Handling**: Try-catch for file loading, fallback to default outcomes
- **All calculations use integer arithmetic**
- **Mixed numbers use base-4 system for loss/recovery tracking**

## System Status
✅ **FULLY COMPLETED** - Streamlit Web Application with complete 2-stage roulette system:

### Streamlit Features:
- Interactive web interface with configuration panel
- File input system supporting Excel (.xls/.xlsx) and CSV files
- User-configurable sequence codes (Standard vs Alternative)
- Adjustable Stage 2 starting divisor (1-32 range)
- Real-time results display with interactive DataFrame
- Balance progression visualization with matplotlib
- Comprehensive system messages and debug output
- Final summary with session statistics

### Stage 1 Features:
- Sequence codes with win/loss formulas and special rules
- A1 wait rule with 3 consecutive non-A1 trigger
- Four corner loss rule with delayed sequence code display
- Mixed numbers system for loss tracking (-5.3 = 17 chips deficit)
- Bet progression (Bet1 → Bet2 → Bet3) with proper display
- All timing and interaction rules between systems

### Stage 2 Features:
- Unit-based recovery betting (c ÷ divisor)
- User-configurable initial divisor (default: 8, range: 1-32)
- Divisor progression (8→4→2→1) when b > 89 during active betting
- Entry condition: a ≤ 10 AND sequence codes displayed
- Special bypass rule: continue betting when negative > 20 units
- Betting restrictions during Four Corner Loss Rule
- Complete mixed numbers recovery system
- Proper final display with recovery line and "STOP" message

### Complete System Integration:
- Streamlit framework with pandas and matplotlib integration
- File management system with automatic discovery
- Robust error handling for file operations
- All complex rule interactions working correctly
- Mixed numbers carry forward from Stage 1 to Stage 2
- Proper balance calculations and final profit display
- Full DataFrame output with all formatting requirements
- Visual balance progression tracking
- Session management with bank tracking (250 unit starting bank)

**Web application ready for production use with comprehensive UI and file support**