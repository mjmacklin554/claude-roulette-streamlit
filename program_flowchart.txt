# Roulette Betting System - Streamlit Application Flowchart
Date: 2025-10-20
Updated: Streamlit Web Application with File Input and User Configuration

## Main Program Flow

START (Streamlit App)
  ↓
Streamlit UI Configuration
├─ Title: "Michael's Roulette System Configuration"
├─ File Input Section:
│  ├─ Checkbox: "Load outcomes from file"
│  ├─ File Selector: Excel/CSV files from 'numbers' folder
│  └─ File Loading: Read outcomes from selected file or use defaults
├─ Sequence Code Selection:
│  ├─ Option 1: "Standard (3, 4, 2)"
│  └─ Option 2: "Alternative (8, 44, 10)"
├─ Stage 2 Divisor Input: Default 8, range 1-32
└─ Run Button: "Run Simulation"
  ↓
Initialize System Variables (when Run button pressed)
├─ Load outcomes from file OR use defaults
├─ Set A1 = [2,3,5,6,17,18,20,21,25,26,28,29,31,32,34,35] (16 corner bets)
├─ Set A2 = [1-6,13-18,19-24,25-30,31-36] (30 six-line bets)
├─ sequence_code = selected sequence codes
├─ recording = False, balance = 0, current_bet_type = 1
├─ stage = 1, stage2_divisor = user input
├─ cumulative_negative = {integer:0, decimal:0}
├─ cumulative_positive_chips = 0
├─ waiting_for_a1_losses = False
├─ four_corner_rule_active = False
├─ starting_bank = 250 units
└─ All counters and tracking variables = 0
  ↓
FOR EACH OUTCOME in outcomes:
  ↓
┌─────────────────────────────────────┐
│ Determine Win/Loss                  │
│ win = 'W' if outcome in A1 else 'L' │
└─────────────────────────────────────┘
  ↓
┌──────────────────────┐    ┌─────────────────────────────────┐
│ Is recording active? │NO  │ Check for first A1 win         │
│                      ├───→│ If win=='W': recording = True   │
│                      │    │ Continue to next outcome        │
└──────┬───────────────┘    └─────────────────────────────────┘
       │YES
       ↓
┌─────────────────────────────────────────────────────────────┐
│ SEQUENCE CODE MANAGEMENT                                    │
├─ Check if pending_sequence_codes exist (from 4-corner rule) │
├─ If four_corner_rule_active: suppress code display         │
├─ Else: show current sequence codes in DataFrame            │
└─────────────────────────────────────────────────────────────┘
  ↓
┌─────────────────────────────────────────────────────────────┐
│ STAGE-DEPENDENT BETTING LOGIC                              │
├─ If stage == 1: Call place_bet(outcome) [STAGE 1]         │
│   ├─ Check A1 wait rule                                    │
│   │   ├─ If waiting_for_a1_losses: return 0 (no bet)      │
│   │   └─ Track non_a1_count, end wait after 3 non-A1     │
│   ├─ Determine bet based on current_bet_type               │
│   │   ├─ Bet1: 5 chips on A2 (+1/-5)                     │
│   │   ├─ Bet2: 4 chips on A1 (+5/-4)                     │
│   │   └─ Bet3: 8 chips on A1 (+10/-8)                    │
│   ├─ Handle mixed numbers for losses/wins                  │
│   ├─ Update balance and current_bet_type                   │
│   ├─ If A1 win: start A1 wait rule                        │
│   └─ If Bet3 lost: stage = 2, initialize Stage 2          │
├─ If stage == 2: Call place_stage2_bet() [STAGE 2]         │
│   ├─ Check if sequence codes displayed (no bet if not)     │
│   ├─ Check a ≤ 10 rule (bypass if negative > 20 units)    │
│   ├─ Calculate units: c ÷ divisor (minimum 1 unit)        │
│   ├─ Bet on A1 numbers only                               │
│   ├─ Handle mixed numbers with BIP for wins               │
│   ├─ Update divisor if b > 89 rule applies                │
│   ├─ Check recovery: negative + positive ≥ 0              │
│   └─ If recovered: stage = 3, display final mixed numbers │
├─ If stage == 3: Show "STOP" and success message           │
└─ Record bet and mixed numbers in DataFrame                 │
└─────────────────────────────────────────────────────────────┘
  ↓
┌─────────────────────────────────────────────────────────────┐
│ FOUR CORNER LOSS RULE TRACKING                             │
├─ Track consecutive_non_a1 counter                          │
├─ If outcome in A1: reset counter, end rule if active      │
├─ If outcome not in A1: increment counter                  │
├─ If counter == 4: activate four_corner_rule               │
└─────────────────────────────────────────────────────────────┘
  ↓
┌─────────────────────────────────────────────────────────────┐
│ SEQUENCE CODE UPDATE (ALWAYS EXECUTED)                     │
├─ is_a1_win = outcome in A1                                │
├─ Call update_sequence_codes(is_a1_win)                     │
│   ├─ If A1 win: apply win formula                         │
│   │   ├─ Calculate new 'a' based on ranges               │
│   │   ├─ b = b - c                                        │
│   │   └─ c = (int(b/a)) * 2                              │
│   └─ If A1 loss: apply loss formula                       │
│       ├─ a = a + 1                                        │
│       ├─ b = b + c                                        │
│       ├─ If b > 89: b = int((b+1)/2)                     │
│       └─ c = (int(b/a)) * 2                              │
├─ If four_corner_rule just triggered:                      │
│   ├─ Save calculated codes as pending_sequence_codes      │
│   └─ Will be applied after A1 outcome ends rule          │
├─ Update divisor if in Stage 2 and b > 89 during betting  │
│   └─ Divisor progression: 8→4→2→1 (only during betting)  │
└─────────────────────────────────────────────────────────────┘
  ↓
┌─────────────────────────────────────────────────────────────┐
│ END CONDITIONS CHECK                                        │
├─ Stage 1: If current_bet_type > 3: Stage 1 ends (Bet3 lost)│
├─ Stage 2: If full recovery achieved: Stage 2 ends          │
├─ Stage 2: If bank lost (1000 chips): Sequence ends in fail │
├─ Continue to next outcome if sequence not ended            │
└─────────────────────────────────────────────────────────────┘
  ↓
END FOR EACH OUTCOME
  ↓
Streamlit Output Display
├─ Display Results DataFrame with columns:
│  ├─ line, outcome, win, a, b, c
│  ├─ actual bet, negative, positive, balance
├─ Balance Progression Graph:
│  ├─ Matplotlib line chart
│  ├─ X-axis: Spin Number
│  ├─ Y-axis: Balance
│  └─ Break-even line at y=0
├─ System Messages:
│  └─ Debug messages and system events
└─ Final Results Summary:
   ├─ Starting Sequence Codes
   ├─ Total Sequences Completed
   ├─ Final Balance (chips)
   ├─ Final Bank (units)
   ├─ Session Status (ACTIVE/ENDED)
   └─ Outcomes Processed
  ↓
END PROGRAM

## Rule Interaction Matrix

┌──────────────────┬─────────┬────────────────┬────────────────┬─────────────────┐
│ State            │ Stage   │ Betting        │ Sequence Codes │ Display Codes   │
├──────────────────┼─────────┼────────────────┼────────────────┼─────────────────┤
│ Normal           │ 1 & 2   │ Active         │ Update & Show  │ Yes             │
│ A1 Wait          │ 1 only  │ STOPPED        │ Update & Show  │ Yes             │
│ 4-Corner Active  │ 1       │ Active         │ Update Only    │ NO (suppressed) │
│ 4-Corner Active  │ 2       │ STOPPED        │ Update Only    │ NO (suppressed) │
│ 4-Corner Ended   │ 1 & 2   │ Active         │ Apply Pending  │ Yes (delayed)   │
│ a > 10           │ 2 only  │ STOPPED*       │ Update & Show  │ Yes             │
│ Stage 2 Complete │ 3       │ None           │ Final Codes    │ Yes + "STOP"    │
└──────────────────┴─────────┴────────────────┴────────────────┴─────────────────┘
* Unless negative > 20 units, then betting continues

## Key Decision Points

1. **Recording Started?**
   - NO: Wait for first A1 win
   - YES: Process full logic

2. **A1 Wait Rule Active?**
   - YES: No betting, but continue sequence codes
   - NO: Normal betting

3. **Four Corner Rule Active?**
   - YES: Suppress sequence code display
   - NO: Show current codes

4. **Pending Sequence Codes?**
   - YES: Apply and display delayed codes
   - NO: Display current codes

5. **Stage 1 Bet Result?**
   - Win: Reset to Bet1, check A1 wait trigger
   - Loss: Progress to next bet type

6. **Stage 2 Entry Conditions?**
   - a ≤ 10 AND sequence codes displayed
   - OR negative > 20 units (bypass a ≤ 10 rule)

7. **Stage 2 Recovery Status?**
   - negative + positive ≥ 0: Complete recovery → Stage 3
   - negative + positive < 0: Continue Stage 2

8. **Divisor Update Needed?**
   - During Stage 2 active betting only
   - When b > 89 rule applies: divisor ÷ 2

## Critical Timing Notes

- Sequence codes calculated AFTER outcome, applied to CURRENT line display
- Stage 1: A1 wait rule affects NEXT line onwards (betting only)
- Stage 1: Four corner rule suppresses NEXT line display but allows betting
- Stage 2: Four corner rule suppresses NEXT line display AND stops betting
- Stage 2: Betting only when sequence codes are displayed
- Stage 2: Divisor changes only during active betting periods
- Betting resumes line AFTER wait periods end
- Mixed numbers carry forward from Stage 1 to Stage 2
- Recovery completion triggers Stage 3 with "STOP" display
- All rules can be active simultaneously with stage-specific behaviors